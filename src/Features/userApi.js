import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { Api } from "./Api";

export const userApi = createApi({
  reducerPath: "userApi",
  baseQuery: fetchBaseQuery({
    baseUrl: Api,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem("access_token");
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  tagTypes: ["User"],
  endpoints: (build) => ({
    getUser: build.query({
      query: () => "/user",
      providesTags: ["User"],
    }),
    getMentionedUsers: build.query({
      query: ({ offset, limit }) =>
        `/user/search?offset=${offset}&limit=${limit}`,
      providesTags: ["User"],
    }),
    getAnotherUserProfile: build.query({
      query: (user_id) => `/profile/${user_id}`,
      providesTags: ["User"],
    }),
    getSuggestedUsersToFollow: build.query({
      query: ({ offset, limit }) =>
        `/user/suggested?offset=${offset}&limit=${limit}`,
      providesTags: ["User"],
    }),
    updateUserImage: build.mutation({
      query: (formData) => ({
        url: "/user/image",
        method: "POST",
        body: formData,
      }),
      invalidatesTags: ["User"],
    }),
    authenticated: build.query({
      query: () => "/user/authenticated",
      providesTags: ["User"],
    }),
    updateUserInformation: build.mutation({
      query: (formData) => ({
        url: "/user/update",
        method: "PUT",
        body: formData,
      }),
      invalidatesTags: ["User"],
    }),
  }),
});

// Export hooks auto-generated by RTK Query
export const {
  useGetAnotherUserProfileQuery,
  useGetSuggestedUsersToFollowQuery,
  useGetMentionedUsersQuery,
  useGetUserQuery,
  useAuthenticatedQuery, // <-- don't forget this one
  useUpdateUserInformationMutation,
  useUpdateUserImageMutation,
} = userApi;
