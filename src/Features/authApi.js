import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { Api } from "./Api";

// Define your base API service:
export const authApi = createApi({
  reducerPath: "authApi", // unique key for this API slice
  baseQuery: fetchBaseQuery({
    baseUrl: Api,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem("verification_token");
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }), // your API base URL here
  tagTypes: ["User"], // used for cache invalidation if needed
  endpoints: (build) => ({
    login: build.mutation({
      query: ({ formData }) => ({
        url: "auth/login",
        method: "POST",
        body: formData,
      }),
    }),
    register: build.mutation({
      query: ({ formData }) => ({
        url: "auth/register",
        method: "POST",
        body: formData,
      }),
    }),
    logout: build.mutation({
      query: () => ({
        url: "auth/logout",
        method: "POST",
      }),
    }),
    forgotPassword: build.mutation({
      query: ({ formData }) => ({
        url: "auth/send-verification-email",
        method: "POST",
        body: formData,
      }),
    }),
    updatePassword: build.mutation({
      query: ({ formData }) => ({
        url: "auth/update-password",
        method: "PUT",
        body: formData,
      }),
    }),
    getVerificationToken: build.query({
      query: (reference_id) =>
        `/auth/generate-verification-token/${reference_id}`,
    }),
    // Add more endpoints for other actions following the same pattern
  }),
});

// Export hooks auto-generated by RTK Query
export const {
  useLoginMutation,
  useRegisterMutation,
  useLogoutMutation,
  useForgotPasswordMutation,
  useUpdatePasswordMutation,
  useGetVerificationTokenQuery,
} = authApi;
